import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';
import {
    Box, Button, CircularProgress,
    Dialog, DialogActions,
    DialogContent,
    DialogTitle, Stack,
    Typography
} from "@mui/material";
import {RecordForm} from "./pages/RecordForm";
import {RecordType} from "./schema";
import {enrich_data, get_all_records} from "./fetch";
import {PhoneNumber, PhoneNumberFormat, PhoneNumberUtil} from "google-libphonenumber";
import {City, Country, ICity, ICountry, IState, State} from "country-state-city";
import {RecordsTable} from "./pages/RecordsTable";
import {MUIDataTableState} from "mui-datatables";
import {Table_url_state_manager} from "./table_url_state_manager";
import {getQParam, useLocation} from "./hooks";
import _ from 'lodash';

const number_util = PhoneNumberUtil.getInstance();

type TableData = RecordType & {
    _location: [ICountry | undefined, IState | undefined, ICity | undefined],
    _phone?: PhoneNumber,
};

function locate(from: Partial<RecordType>): [ICountry | undefined, IState | undefined, ICity | undefined] {
    if (!from)
        return [undefined, undefined, undefined];

    const icountry = Country.getCountryByCode(from.country || '');
    const istate = State.getStateByCodeAndCountry(from.state || '', from.country || '');
    const cities = City.getCitiesOfState(from.country || '', from.state || '');
    const icity = cities.find(x => x.name == from.city);
    return [icountry, istate, icity];
}

enum dialog_paths {
    '/edit',
    '/delete',
    '/create',
}

type DialogContentType = {
    type: 'loading' | 'edit' | 'create' | 'delete' | 'error',
    label: string,
    content: string | React.ReactElement,
    on_confirm?: () => void,
    on_cancel?: () => void,
}

function App() {
    const table_ref = useRef<MUIDataTableState>();
    const data_ref = useRef<TableData[]>();
    const [n, set_n] = useState(0);
    const [loading, set_loading] = useState(false);
    const mark_dirty = useCallback(() => set_n(p => p + 1), []);
    const table_manager = new Table_url_state_manager(table_ref, data_ref, mark_dirty);
    const [dialog_content, set_dialog_content] = useState<DialogContentType>();
    const [url, set_url] = useLocation();
    const go_to = useCallback((path: string, q?: { [key: string]: string }) => {
        set_url(prevState => {
            prevState.pathname = path;
            if (!_.isEmpty(q)) {
                _.forOwn(q, (value, key) => prevState.searchParams.set(key, value));
            }
            return prevState;
        });
        mark_dirty();
    }, [set_url]);
    const active_item = useMemo(() => {
        if (url.pathname == '/create')
            return {};
        if (url.pathname == '/edit') {
            const index = table_manager.selection?.[0];
            if (Number.isInteger(index) && index >= 0)
                return table_manager.data?.[index];
        }

        return undefined;
    }, [table_manager.selection, table_manager.data, url]);
    const on_confirm = useCallback((x: TableData | undefined, type: 'create' | 'edit' | 'delete') => {
        switch (type) {
            case "create":
                table_manager.data?.push(x);
                break;
            case "edit":
                table_manager.replace_active_item(x);
                break;
            case "delete":
                table_manager.data = table_manager.data?.filter(d => x?.email != d.email);
                break;
        }
        const sel = x?.email || '';
        go_to('/all', {sel});
    }, [table_manager?.data, table_manager?.selection, go_to]);

    // useEffect(() => {
    //     if (dialog_content?.type == 'loading')
    //         return;
    //
    //     if (url.pathname == '/create') {
    //         set_dialog_content({
    //             type: 'create',
    //             label: 'Creating record',
    //             content: <RecordForm on_confirm={on_confirm}/>
    //         });
    //     } else if (url.pathname == '/edit') {
    //         set_dialog_content({
    //             type: 'edit',
    //             label: 'Editing record',
    //             content: <RecordForm on_confirm={on_confirm} source={active_item}/>
    //         });
    //     } else if (url.pathname == '/delete') {
    //         set_dialog_content({
    //             type: 'delete',
    //             label: 'Deleting record',
    //             content: `Are you sure you want to delete ${active_item?.name} record?`,
    //             on_cancel: ()=>{
    //                 go_to('/all');
    //             },
    //         });
    //     }
    // }, [url?.pathname]);

    useEffect(function load_from_srv() {
        set_loading(true);

        get_all_records()
            .then(data => {
                table_manager.data = data;
                set_dialog_content(undefined);

            }).catch(e => set_dialog_content({
            type: 'error',
            label: 'Server error',
            content: e.message,
            on_cancel: () => go_to('/all'),
        })).finally(() => {
            set_loading(false);
        })
    }, []);

    return (
        <Box>
            {/*<Dialog open={!_.isEmpty(dialog_content)}*/}
            {/*        onClose={() => {*/}
            {/*            go_to('/all');*/}
            {/*            set_dialog_content(undefined);*/}
            {/*        }}>*/}
            {/*    <DialogTitle>{dialog_content?.label}</DialogTitle>*/}
            {/*    <DialogContent sx={{alignSelf: 'center'}}>*/}
            {/*        {dialog_content?.content}*/}
            {/*    </DialogContent>*/}
            {/*    <DialogActions>*/}
            {/*        {dialog_content?.on_confirm &&*/}
            {/*            <Button variant={'contained'} onClick={() => dialog_content?.on_confirm?.()}>Confirm</Button>*/}
            {/*        }*/}
            {/*        {dialog_content?.on_cancel &&*/}
            {/*            <Button onClick={() => dialog_content?.on_cancel?.()}>Cancel</Button>*/}
            {/*        }*/}
            {/*    </DialogActions>*/}
            {/*</Dialog>*/}

            <RecordsTable state_manager={table_manager}
                          loading={loading}
                          go_to={go_to}/>
        </Box>
    );
}

export default App;
